// <auto-generated />
using System;
using System.Collections.Generic;
using Innts.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Innts.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Innts.Model.CustomUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActivate")
                        .HasColumnType("boolean");

                    b.PrimitiveCollection<List<string>>("KbDatabaseChache")
                        .HasColumnType("text[]");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Innts.Model.CustomUserTokenStorageModel", b =>
                {
                    b.Property<long>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("TokenId"));

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("TokenId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("TokenStorage");
                });

            modelBuilder.Entity("Innts.Models.CompanyModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("additionalCoords")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("additionalSiteAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("avgSalaryMoscow2022")
                        .HasColumnType("integer");

                    b.Property<int>("avgSalaryMoscow2023")
                        .HasColumnType("integer");

                    b.Property<int>("avgSalaryMoscow2024")
                        .HasColumnType("integer");

                    b.Property<int>("avgSalaryTotal2022")
                        .HasColumnType("integer");

                    b.Property<int>("avgSalaryTotal2023")
                        .HasColumnType("integer");

                    b.Property<int>("avgSalaryTotal2024")
                        .HasColumnType("integer");

                    b.Property<string>("capacityUtilization")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("director")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("district")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("emergencyContact")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("excise2022")
                        .HasColumnType("integer");

                    b.Property<int>("excise2023")
                        .HasColumnType("integer");

                    b.Property<int>("excise2024")
                        .HasColumnType("integer");

                    b.Property<int>("export2022")
                        .HasColumnType("integer");

                    b.Property<int>("export2023")
                        .HasColumnType("integer");

                    b.Property<int>("export2024")
                        .HasColumnType("integer");

                    b.Property<string>("exportCountries")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("exportPrevYear")
                        .HasColumnType("integer");

                    b.Property<string>("hasExport")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("hasGovOrder")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("head")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("industry")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("inn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("investMoscow2022")
                        .HasColumnType("integer");

                    b.Property<int>("investMoscow2023")
                        .HasColumnType("integer");

                    b.Property<int>("investMoscow2024")
                        .HasColumnType("integer");

                    b.Property<int>("landArea")
                        .HasColumnType("integer");

                    b.Property<string>("landCadastral")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("landOwner")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("landOwnership")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("landUse")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("latitude")
                        .HasColumnType("integer");

                    b.Property<string>("legalAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("legalCoords")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("longitude")
                        .HasColumnType("integer");

                    b.Property<string>("mainOkved")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("mainOkvedActivity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("managementContacts")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("okrug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("oksArea")
                        .HasColumnType("integer");

                    b.Property<string>("oksCadastral")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("oksOwner")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("oksOwnership")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("oksType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("oksUse")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("okved_description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("orgContact")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("orgFullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("orgName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("parentOrgInn")
                        .HasColumnType("integer");

                    b.Property<string>("parentOrgName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("payrollMoscow2022")
                        .HasColumnType("integer");

                    b.Property<int>("payrollMoscow2023")
                        .HasColumnType("integer");

                    b.Property<int>("payrollMoscow2024")
                        .HasColumnType("integer");

                    b.Property<int>("payrollTotal2022")
                        .HasColumnType("integer");

                    b.Property<int>("payrollTotal2023")
                        .HasColumnType("integer");

                    b.Property<int>("payrollTotal2024")
                        .HasColumnType("integer");

                    b.Property<string>("productCatalog")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("productNames")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("productOkpd2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("productSegments")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("productionAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("productionArea")
                        .HasColumnType("integer");

                    b.Property<string>("productionCoords")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("productionOkved")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("profit2022")
                        .HasColumnType("integer");

                    b.Property<int>("profit2023")
                        .HasColumnType("integer");

                    b.Property<int>("profit2024")
                        .HasColumnType("integer");

                    b.Property<string>("registrationDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("revenue2022")
                        .HasColumnType("integer");

                    b.Property<int>("revenue2023")
                        .HasColumnType("integer");

                    b.Property<int>("revenue2024")
                        .HasColumnType("integer");

                    b.Property<string>("smeStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("specialStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("staffMoscow2022")
                        .HasColumnType("integer");

                    b.Property<int>("staffMoscow2023")
                        .HasColumnType("integer");

                    b.Property<int>("staffMoscow2024")
                        .HasColumnType("integer");

                    b.Property<int>("staffTotal2022")
                        .HasColumnType("integer");

                    b.Property<int>("staffTotal2023")
                        .HasColumnType("integer");

                    b.Property<int>("staffTotal2024")
                        .HasColumnType("integer");

                    b.Property<string>("standardizedProduct")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("subIndustry")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("supportMeasures")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("taxLand2022")
                        .HasColumnType("integer");

                    b.Property<int>("taxLand2023")
                        .HasColumnType("integer");

                    b.Property<int>("taxLand2024")
                        .HasColumnType("integer");

                    b.Property<int>("taxNdfl2022")
                        .HasColumnType("integer");

                    b.Property<int>("taxNdfl2023")
                        .HasColumnType("integer");

                    b.Property<int>("taxNdfl2024")
                        .HasColumnType("integer");

                    b.Property<int>("taxOther2022")
                        .HasColumnType("integer");

                    b.Property<int>("taxOther2023")
                        .HasColumnType("integer");

                    b.Property<int>("taxOther2024")
                        .HasColumnType("integer");

                    b.Property<int>("taxProfit2022")
                        .HasColumnType("integer");

                    b.Property<int>("taxProfit2023")
                        .HasColumnType("integer");

                    b.Property<int>("taxProfit2024")
                        .HasColumnType("integer");

                    b.Property<int>("taxProperty2022")
                        .HasColumnType("integer");

                    b.Property<int>("taxProperty2023")
                        .HasColumnType("integer");

                    b.Property<int>("taxProperty2024")
                        .HasColumnType("integer");

                    b.Property<int>("taxTotal2022")
                        .HasColumnType("integer");

                    b.Property<int>("taxTotal2023")
                        .HasColumnType("integer");

                    b.Property<int>("taxTotal2024")
                        .HasColumnType("integer");

                    b.Property<int>("taxTransport2022")
                        .HasColumnType("integer");

                    b.Property<int>("taxTransport2023")
                        .HasColumnType("integer");

                    b.Property<int>("taxTransport2024")
                        .HasColumnType("integer");

                    b.Property<string>("website")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<long>", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Innts.Model.CustomUserTokenStorageModel", b =>
                {
                    b.HasOne("Innts.Model.CustomUser", "User")
                        .WithOne("Token")
                        .HasForeignKey("Innts.Model.CustomUserTokenStorageModel", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<long>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("Innts.Model.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("Innts.Model.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<long>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Innts.Model.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("Innts.Model.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Innts.Model.CustomUser", b =>
                {
                    b.Navigation("Token");
                });
#pragma warning restore 612, 618
        }
    }
}
